name: pyjs-generic

on:
  workflow_dispatch:
    inputs:
      variant:
        type: choice
        description: Please select a build variant
        default: shared-pkg
        required: true
        options: 
          - framework-ext
          - framework-pkg
          - shared-ext
          - shared-pkg
          - static-ext
          - relocatable-pkg
          - vanilla-ext
          - vanilla-pkg

env:
  arch: darwin-x86

jobs:
  build:
    runs-on: macos-10.15
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']

    steps:

    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
        fetch-depth: '0'

    - uses: benjlevesque/short-sha@v1.2
      id: short-sha
      with:
        length: 7

    - name: Cache downloads
      id: cache-downloads
      uses: actions/cache@v3
      env:
        cache-name: pyjs-cache-1
      with:
        path: |
          source/py/targets/build/downloads
          source/py/targets/build/lib/bzip2
          source/py/targets/build/lib/openssl
          source/py/targets/build/lib/xz
        key: $${{ env.cache-name }}-${{ hashFiles('source/py/resources/pyjs-dependencies.txt') }}

    - name: Setup python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Display python version
      run: python3 --version

    - name: Import development certificate
      uses: apple-actions/import-codesign-certs@v1
      with: 
        p12-file-base64: ${{ secrets.MACOS_DEV_CERTIFICATE }}
        p12-password: ${{ secrets.MACOS_DEV_PWD }}

    # - name: Import development certificate
    #   uses: devbotsxyz/import-signing-certificate@main
    #   with:
    #     certificate-data: ${{ secrets.MACOS_DEV_CERTIFICATE }}
    #     certificate-passphrase: ${{ secrets.MACOS_DEV_PWD }}
    #     keychain-password: ${{ secrets.KEYCHAIN_PWD }}

    - name: Build externals
      run: make ${{ github.event.inputs.variant }}

    - name: Sign externals
      env:
        DEV_ID: ${{ secrets.DEV_ID }}
      run: make sign

    - name: Package externals
      env:
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_SHA: ${{ github.sha }}
      run: |
        PACKAGE_NAME=`echo $GITHUB_REPOSITORY | sed 's/.*\///g'`
        PACKAGE_REV=`echo $GITHUB_SHA | sed -e 's/^[[:alnum:]]\{7\}/&-/g' | sed 's/-.*//'`
        mkdir -p $PACKAGE_NAME
        if [ -e package-info.json ]; then cp package-info.json $PACKAGE_NAME; fi
        if [ -e package-info.json.in ]; then cp package-info.json.in $PACKAGE_NAME; fi
        for f in *.md; do [ -e "$f" ] && cp "$f" $PACKAGE_NAME ; done
        if [ -e icon.png ]; then cp icon.png $PACKAGE_NAME; fi
        if [ -d docs ]; then cp -r docs $PACKAGE_NAME; fi
        if [ -d examples ]; then cp -r examples $PACKAGE_NAME; fi
        if [ -d externals ]; then cp -af externals $PACKAGE_NAME; fi
        if [ -d extras ]; then cp -r extras $PACKAGE_NAME; fi
        if [ -d help ]; then cp -r help $PACKAGE_NAME; fi
        if [ -d init ]; then cp -r init $PACKAGE_NAME; fi
        if [ -d javascript ]; then cp -r init $PACKAGE_NAME; fi
        if [ -d jsextensions ]; then cp -r jsextensions $PACKAGE_NAME; fi
        if [ -d patchers ]; then cp -r patchers $PACKAGE_NAME; fi
        if [ -d support ]; then cp -af support $PACKAGE_NAME; fi
        ditto -ck --rsrc --sequesterRsrc $PACKAGE_NAME archive.zip
        rm -rf $PACKAGE_NAME && mkdir -p $PACKAGE_NAME
        mv archive.zip $PACKAGE_NAME/

    - uses: actions/upload-artifact@v3
      with:
        name: ${{ github.event.repository.name }}-${{ github.event.inputs.variant }}-${{ env.arch }}-${{ matrix.python-version }}-${{ steps.short-sha.outputs.sha }}
        path: ${{ github.event.repository.name }}
