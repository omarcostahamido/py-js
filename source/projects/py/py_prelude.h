// py_prelude.h: pure python functions for the `py` external
// generated by `py/scripts/py2c.py`

static const char* PY_PRELUDE_MODULE =
"\"\"\"py_prelude.py: extends the `py` external with pure python functions\n"
"\n"
"\"\"\"\n"
"import os\n"
"import subprocess\n"
"import shlex\n"
"import collections.abc\n"
"from functools import reduce\n"
"\n"
"# ---------------------------------------------------------\n"
"# global constants\n"
"\n"
"EDITOR = \"Sublime Text\"  # can be changed of course\n"
"\n"
"\n"
"\n"
"# ---------------------------------------------------------\n"
"# private utilities\n"
"\n"
"def is_sequence(obj):\n"
"    if isinstance(obj, str):\n"
"        return False\n"
"    return isinstance(obj, collections.abc.Sequence)\n"
"\n"
"\n"
"def __compose(f, g):\n"
"    return lambda x: f(g(x))\n"
"\n"
"\n"
"def __analyze(s: str):\n"
"    fs = []\n"
"    args = []\n"
"    kwargs = []\n"
"    str_args = s.split()\n"
"    for str_arg in str_args:\n"
"        if '=' in str_arg:\n"
"            k, v = str_arg.split('=')\n"
"            kwargs.append((\n"
"                eval(repr(k), locals(), globals()),\n"
"                eval(v, locals(), globals())\n"
"            ))\n"
"        else:\n"
"            elem = eval(str_arg, locals(), globals())\n"
"            if callable(elem):\n"
"                fs.append(elem)\n"
"            else:\n"
"                args.append(elem)\n"
"    return fs, args, kwargs\n"
"\n"
"\n"
"# ---------------------------------------------------------\n"
"# test funcs\n"
"\n"
"identity = lambda x: x\n"
"\n"
"add100 = lambda x: x+100\n"
"\n"
"sub20 = lambda x: x-20\n"
"\n"
"div2 = lambda x: x/2\n"
"\n"
"mul2 = lambda x: x*2\n"
"\n"
"mul10 = lambda x: x*10\n"
"\n"
"mul5 = lambda x: x*5\n"
"\n"
"mul6 = lambda x: x*7\n"
"\n"
"sumargs = lambda *args, **kwargs: sum(args)\n"
"\n"
"sumvals = lambda *args, **kwargs: sum(v for (k,v) in kwargs.items())\n"
"\n"
"# ---------------------------------------------------------\n"
"# misc funcs\n"
"\n"
"def edit(path: str):\n"
"    editor = os.getenv(\"EDITOR\", EDITOR)\n"
"    path = os.path.expanduser(path)\n"
"    shell(f'open -a \"{editor}\" \"{path}\"')\n"
"\n"
"\n"
"# ---------------------------------------------------------\n"
"# funcs are used by methods\n"
"\n"
"def shell(cmd: str, err_func=None):\n"
"    result = None\n"
"    try:\n"
"        elems = shlex.split(cmd)\n"
"        elems[-1] = os.path.expanduser(elems[-1])  # ~/a/b.c -> /Users/xx/a/b.c\n"
"        result = subprocess.check_output(elems, encoding=\"utf8\").strip()\n"
"    except subprocess.CalledProcessError as e:\n"
"        if err_func:\n"
"            err_func(e.stderr)\n"
"    except FileNotFoundError as e:\n"
"        if err_func:\n"
"            err_func(e.strerror)\n"
"    if result:\n"
"        return result\n"
"\n"
"\n"
"def out_dict(py_dict: dict):\n"
"    res = []\n"
"    for k, v in py_dict.items():\n"
"        res.append(k)\n"
"        res.append(\":\")\n"
"        if type(v) in [list, set, tuple]:\n"
"            for i in v:\n"
"                res.append(i)\n"
"        else:\n"
"            res.append(v)\n"
"    return res\n"
"\n"
"\n"
"\n"
"def pipe(s: str):\n"
"    \"\"\"pipe variable(s) through a list of functions\n"
"\n"
"    With a single variable a list of function:\n"
"\n"
"    >>> pipe('10 math.sin math.cos')\n"
"    0.8556343548213665\n"
"\n"
"    Acts like a chain of maps With many variables\n"
"    and many functions:\n"
"\n"
"    >>> pipe('math.sin math.cos 10 20 30')\n"
"    [0.8556343548213665, 0.6114178044194122, 0.5503344099628433]\n"
"\n"
"    Consistent with the pipe function can apply several\n"
"    variables to a single function like `sum` in this case:\n"
"\n"
"    >>> pipe('math.sin math.cos sum 10 20 30')\n"
"    2.017386569203622\n"
"\n"
"    :param      s:    { parameter_description }\n"
"    :type       s:    { type_description }\n"
"    \"\"\"\n"
"    fs, args, kwargs = __analyze(s)\n"
"    if args and fs:\n"
"        if len(args) == 1:\n"
"            arg = args[:].pop()\n"
"            for f in fs:\n"
"                arg = f(arg)\n"
"            return arg\n"
"        else:\n"
"            for f in fs:\n"
"                try:\n"
"                    args = list(map(f, args))\n"
"                except TypeError:\n"
"                    args = f(args)\n"
"            if args:\n"
"                return args\n"
"\n"
"\n"
"\n"
"def call(s: str):\n"
"    \"\"\"\n"
"    Applies args to a function\n"
"\n"
"    >>> call('sum 1 2 3')\n"
"    6\n"
"    \n"
"    >>> f = lambda *args, **kwargs: print(args, kwargs)\n"
"\n"
"    >>> call('f 10 20 a=1')\n"
"    (10, 20) {'a': 1}\n"
"    \n"
"    :param      s:    { parameter_description }\n"
"    :type       s:    { type_description }\n"
"    \"\"\"\n"
"    fs, args, kwargs = __analyze(s)\n"
"    if len(fs) == 1:\n"
"        f = fs[0]\n"
"        try:\n"
"            return f(*args, **dict(kwargs))\n"
"        except TypeError:\n"
"            return f(args, **dict(kwargs))\n"
"        except:\n"
"            return f(args[0])\n"
"\n"
"\n"
"def foldl(s: str):\n"
"    \"\"\"\n"
"    Apply function of two arguments cumulatively to the items of iterable,\n"
"    from left to right, so as to reduce the iterable to a single value.\n"
"\n"
"    >>> foldl('add 0 10 20 30 40')\n"
"    100\n"
"    \n"
"    :param      s:    { parameter_description }\n"
"    :type       s:    { type_description }\n"
"    \"\"\"\n"
"    fs, args, kwargs = __analyze(s)\n"
"    if len(fs) == 1:\n"
"        f = fs[0]\n"
"        accum, seq = args[0], args[1:]\n"
"        return reduce(f, seq, accum)\n"
"\n"
"\n"
"\n"
"\n"
"\n";
