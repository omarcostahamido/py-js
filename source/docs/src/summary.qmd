# py-js: python3 objects for max

Simple (and extensible) [python3](https://www.python.org) externals for [MaxMSP](https://cycling74.com).

Cross-platform: currently builds 'natively' on macOS (`x86_64` or `arm64`) and Windows (with MSVC).

repo - <https://github.com/shakfu/py-js>

[![py-js py.maxhelp](../../../media/py-maxhelp.png)](patchers/py_test_anything.maxpat)

## Preface

This project started out as an attempt (during a covid-19 lockdown) to develop a basic python3 external for Max/MSP. It then evolved into an umbrella project for exploring different ways of using python3 in Max/MSP.

Along the way, a number of externals have been developed for use in a live Max environment:

**Python3 Externals:**

name       | sdk        | lang   | description
:--------- | :--------- | :----: | :---------------------------------------------------
[py]       | max-sdk    | c      | well-featured, many packaging options + [cython](https://cython.org) api
[pyjs]     | max-sdk    | c      | js-friendly -- written as a Max javascript-extension
[mamba]    | max-sdk    | c      | single-header c library to nest a python3 interpreter in any external
[krait]    | max-sdk    | c++    | single-header c++ library to nest a python3 interpreter in any external
[cobra]    | max-sdk    | c      | python3 external providing deferred and clocked function execution
[mxpy]     | max-sdk    | c      | a translation of [pdpython](https://github.com/shakfu/pdpython) into Max
[zedit]    | max-sdk    | c      | a web-based python editor using [codemirror](https://codemirror.net) and the [mongoose](https://github.com/cesanta/mongoose) embedded webserver.
[pymx] [2] | min-devkit | c++    | concise, modern, using [pybind11](https://github.com/pybind/pybind11)

[1] pymx has been moved to its own [github project](https://github.com/shakfu/min.pymx) because it uses the [min-devkit](https://github.com/Cycling74/min-devkit) sdk.

**Alternative Python Implementation Externals:**

name       | sdk        | lang   | description
:--------- | :--------- | :----: | :---------------------------------------------------
[pktpy]    | max-sdk    | c++    | uses the [pocketpy](https://github.com/blueloveTH/pocketpy) single-header c++ library
[mpy] [2]  | max-sdk    | c      | a proof-of-concept embedding [micropython](https://github.com/micropython/micropython)

[2] `mpy` is not enabled by default since it is still in early stages and more of a proof-of-concept to embed micropython in an external. To build it use the `-DBUILD_MICROPYTHON_EXTERNAL` option with cmake.

**ZeroMQ-related Externals:**

name       | sdk        | lang   | description
:--------- | :--------- | :----: | :---------------------------------------------------
[jmx]      | max-sdk    | c      | explore how to embed a [jupyter client](https://jupyter-client.readthedocs.io/en/stable/messaging.html) or [kernel](https://github.com/jupyter-xeus/xeus-python) in an external
[zpy]      | max-sdk    | c      | uses [zeromq](https://zeromq.org) for 2way-comms with an external python process
[zthread]  | max-sdk    | c      | exploration of zeromq and Max threads

Note: zeromq externals are not enabled by default since they require zeromq libraries to be installed. To build them use the `-DBUILD_ZEROMQ_EXTERNALS` option with cmake.

[py]: source/projects/py
[pyjs]: source/projects/pyjs
[mxpy]: source/projects/mxpy
[pymx]: https://github.com/shakfu/min.pymx
[zpy]: source/projects/zpy
[cobra]: source/projects/cobra
[mamba]: source/projects/mamba
[krait]: source/projects/krait
[pktpy]: source/projects/pktpy
[zedit]: source/projects/zedit
[mpy]: source/projects/mpy
[jmx]: source/projects/jmx
[zthread]: source/projects/zthread

The common objective in these externals is to help use and distribute python code and libraries in Max applications. Many can be considered experimental, with 80% of development time going to the first two externals (`py` and `pyjs`). Please see below for an overview and feature comparison.

At the time of this writing, and since the switch to [max-sdk-base](https://github.com/cycling74/max-sdk-base), the project has the following compatibility profile:

- **macOS**: both x86_64 and Apple Silicon compatible. Note that the project intentionally only produces 'native' (`x86_64` xor `arm64`) externals with no current plans for 'fat' or universal externals to serve both architectures. You can download codesigned, notarized `x86_64`-based and `arm64`-based python3 externals from the [releases](https://github.com/shakfu/py-js/releases) section.

- **Windows**: windows support was provided relatively recently, with currently all Python3 externals and also the `pktpy` projects building without issues on Windows. The only caveat is that as of this writing python3 externals are dynamically linked to the local Python3 `.dll` and are therefore not relocatable. One idea to overcome this constraint is to include the external's dependencies in the 'support' folder. This will hopefully be addressed in future iterations. The `pktpy` external, however, is fully portable and self-contained.

This README will mostly cover the first two mature externals (`py.mxo` and `pyjs.mxo`) and their many build variations available via a custom python-based build system which was specifically developed to cater for different scenerios of packaging and deploying the externals in Max packages and standalones.

If you are interested in any of the other subprojects, please look into the respective folder in the `py-js/source/projects` section.

The [Quickstart](#quickstart) section below covers general setup for all of the externals, and will get you up and running with the `py` and `pyjs` externals. The [Building Experimental Externals using Cmake](#building-experimental-externals-using-cmake) section provides additional info to build the other remaining externals, and the [Building self-contained Python3 Externals for Packages and Standalones](#building-self-contained-python3-externals-for-packages-and-standalones) section covers more advanced building and deployment scenarios.

Please feel free to ask questions or make suggestions via the project's github issue tracker.
